Http协议
	工作过程
		建立连接
		发送请求
		响应请求
		断开连接
	特点
		请求响应式
		无状态
		1.1版后支持持续连接
	请求格式(3:3)
		请求行(请求方式 资源路径 协议)
		消息头

		实体内容
	响应格式(3:3)
		状态行(协议 状态码 原因叙述)
		响应头

		响应实体

		Content-Type: text/html; charset=utf-8

Post与Get请求方式
	1、get实体内容通过URL进行传递，Post不是
	2、get方式安全性较低；post方式安全性较高
	3、get方式传递的内容有长度限制；post方式传递的内容没有长度限制
	4、get方式请求过程中会产生缓存；post方式不会产生缓存

	一般网站采用get方式进行请求（有缓存可以提高后面的访问效率）
Servlet
	概述
		Servlet就是一个继承了HttpServlet的java类。
	实现步骤
		1、创建类并继承HttpServlet
		2、重写父类成员
		3、配置Servlet（将类映射为URL资源）
			<!-- 描述类 -->
			<servlet>
				<servlet-name>别名</servlet-name>
				<servlet-class>类(包名 + 类名)</servlet-class>
			</servlet>
			<!-- 映射 -->
			<servlet-mapping>
				<servlet-name>别名</servlet-name>
				<url-pattern>uri</url-pattern>
			</servlet-mapping>

			映射方式
				/路径名
				.后缀*名
				/前缀/*

	如何避免405/400错误
		1、重写service()方法并去掉super关键字
		2、重写doGet()、goPost()......方法并却掉super关键字

	生命周期
		1、加载（实例化对象）
			第一次请求时被加载，只执行一次
		2、初始化（调用init（））
			调用init()方法，只在加载后调用一次
		3、调用
			通过多线程，每一次请求调用一次service()方法
		4、销毁
			服务停止或重启时调用一次destroy()
		
	实现原理
		多线程+单例模式
		
请求与响应
	HttpServletRequest
		概述
			表示客户端的请求，客户端请求信息被封装到了HttpServletRequest对象中
		重要成员
			getContextPath()	：获取上下文路径（文件上传与下载）
			getParameter()		：获取一个请求参数的单一值
			getParameterValues()	：获取一个请求的一组参数值

		问
			getParameter()与getParameterValues()有什么区别？
			getParameter()用于获取一个请求参数的值；getParameterValues()用于获取一个请求参数的一组值。

	HttpServletReponse
		概述
			表示服务器端的响应，服务器对客户端的响应信息封装到了HttpServletResponse对象中
		重要成员
			setHeader()		：设置信息头的参数值（setHeader("content-type","text/html;charset=utf-8")）
			addHeader()		：向现有信息头重添加参数

			getWriter()		：获取Writer对象，通过writer对象的print()可以向客户端输出任意内容


跳转
	概述
		在servlet中实现资源的跳转。包含请求转发和重定向两种方式
	重定向
		概述
			请求发送给服务器后，服务器产生新的地址并发送给客户端；
			客户端接收到新地址后重新发送请求并得到响应。
		实现
			response对象.sendRedirect(URL);
	请求转发
		概述
			请求发送给服务器，服务器经过内部跳转后将响应结果发送给客户端。
		实现
			request对象.getRequestDispatcher(URL).forward(request对象，response对象);

	问
		请求转发与重定向有什么不同？
		1、重定向地址栏发生改变；请求转发地址栏不发生改变
		2、重定向需要进行二次跳转；请求转发一次跳转完成
		3、重定向过程中参数会丢失；请求转发过程中参数不会丢失
		4、重定向可以跳转到服务器以外的资源；请求转发无法跳转到服务器以外的资源
		5、重定向一次跳转后返回302码及ULR地址；请求转发直接返回200

	使用
		1、重定向：a、服务器外的跳转；b、浏览器地址栏需要改变
		2、请求转发：a、不访问外部资源；b、不能丢参数失

状态保持
	Cookie
		概述
			一般由服务器端进行创建，保存在客户端（硬盘——物理文件）
		为什么有Cookie
			1、解决Http协议的无状态
			2、存储系统信息（为了程序提高用户体验性）

		为什么有的Cookie浏览器重新打开后就消失了？
			Cookie可以分为：内存中的Cookie和文件中的Cookie
		缺点
			1、安全性较低
			2、可以被禁用

		重点（应用）
			1、Cookie的创建及读取
			2、设置过期时间及访问路径
		

	Session	
		概述
			表示一次会话（浏览器打开到浏览器关闭）。Session存储在服务器的内存中。
		为什么有Session
			1、解决HttpServlet协议的无状态
			2、存储系统信息（为了程序提高用户体验性）
		重点（应用）
			1、获取Session对象
				HttpSession session = request对象.getSession();
			2、设置Session的值
				session对象.setAttribute("名"，值);	
			3、读取Session的值
				Session对象.getAttribute("名");
			4、移除Session的属性值
				Session对象.removeAttribute("名");
			5、设置过期时间
				session对象.setMaxInactiveInterval(秒)
			6、session失效
				session对象.invalidate();

		session的特点
			1、session无法删除

	Cookie与Session区别
		1、Session存储在服务器端；Cookie存储在客户端
		2、Session存储在内存中；Cookie存储在硬盘中
		3、Session的安全性较高；Cookie的安全性较低
		4、Session可以存储较大的数据；Cookie存储的数据量较小（10K）
		5、Session的读取效率较高；Cookie的读取效率较低


读取初始化参数
	ServletConfig
		作用
			读取Servlet的初始化参数（只对所在的Servlet有效）
	ServletContext
		作用
			读取上下文初始化参数（对所有的Servlet都有效）
		创建方式
			this.getServletContext();
			req.getSession().getServletContext();
			不常用方式
			this.getServletConfig().getServletContext();

		常用方法
			1、读取初始化参数

			2、获取上下文路径（物理路径）
				//多用于文件上传与下载
				getRealPath("/");
			3、获取物理文件的流
				getResourceAsStream()




状态保持
	Cookie
		概述
			由服务器端进行创建，保存在客户端（硬盘——物理文件）
		为什么有Cookie
			1、解决Http协议的无状态
			2、存储系统信息（为了程序提高用户体验性）

		为什么有的Cookie浏览器重新打开后就消失了？
			Cookie可以分为：内存中的Cookie和文件中的Cookie
		缺点
			1、安全性较低
			2、可以被禁用

		重点（应用）
			1、Cookie的创建及读取
			2、设置过期时间及访问路径
		

	Session	
		概述
			表示一次会话（浏览器打开到浏览器关闭）。Session存储在服务器的内存中。
		为什么有Session
			1、解决HttpServlet协议的无状态
			2、存储系统信息（为了程序提高用户体验性）
		重点（应用）
			1、获取Session对象
				HttpSession session = request对象.getSession();
			2、设置Session的值
				session对象.setAttribute("名"，值);	
			3、读取Session的值
				Session对象.getAttribute("名");
			4、移除Session的属性值
				Session对象.removeAttribute("名");
			5、设置过期时间
				session对象.setMaxInactiveInterval(秒)
			6、session失效
				session对象.invalidate();

		session的特点
			1、session无法删除

	Cookie与Session区别
		1、Session存储在服务器端；Cookie存储在客户端
		2、Session存储在内存中；Cookie存储在硬盘中
		3、Session的安全性较高；Cookie的安全性较低
		4、Session可以存储较大的数据；Cookie存储的数据量较小（10K）
		5、Session的读取效率较高；Cookie的读取效率较低


读取初始化参数
	ServletConfig
		作用
			读取Servlet的初始化参数（只对所在的Servlet有效）
	ServletContext
		作用
			读取上下文初始化参数（对所有的Servlet都有效）
		创建方式
			this.getServletContext();
			req.getSession().getServletContext();
			不常用方式
			this.getServletConfig().getServletContext();

		常用方法
			1、读取初始化参数

			2、获取上下文路径（物理路径）
				//多用于文件上传与下载
				getRealPath("/");
			3、获取物理文件的流
				getResourceAsStream()




Servlet
	将类以URL形式进行访问（以URL形式访问java类型，并使用java代码）

请求与响应
	HttpServletRequest	：封装了请求信息，客户端请求信息都到HttpServletRequest对象中进行访问
	HttpServletResponse	：封装了服务器端的响应信息，对客户端的响应信息都通过HttpServletResponse对象进行设置

跳转
	重定向
		Response对象.SendRedirect(URL);
	请求转发
		Rquest对象.getRequestDispatcher(URL).forwar(request对象，response对象);
状态保持
	Cookie			：客户端物理文件
	Session			：服务器内存






//加载驱动
class.forName("驱动字符串");
//获取连接对象
Connection con = DriverManager.getConnection();

//获取命令执行对象——PreparedStatement对象
PreparedStatement ps = con.createStatement();

//执行命令
//执行非查询语句（增、删、改）
ps.executeUpdate();
//执行查询语句(查)
ps.executeQuery();

//关闭对象

String name = "mike";
			