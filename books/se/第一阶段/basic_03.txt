1.Scanner控制台输入
	1.1 Scanner的作用：用于从控制台输入数据
	1.2 Scanner用法
		1)导入Scanner类 
			import java.util.Scanner
		2)创建Scanner对象
			Scanner sc = new Scanner(System.in);
		3)调用Scanner相应API获取相应数据
			int a = sc.nextInt();
			double d = sc.nextDouble();
			byte b = sc.nextByte();
			short s = sc.nextShort();
			String str1 = sc.next();//读取字符串
			String str2 = sc.nextLine();//读取字符串
		next()与nextLine()方法的区别：
			next():对输入有效字符之前遇到的空格键、Tab键或Enter键等结束符，
				   next()方法会自动将其去掉，只有在输入有效字符之后，
				   next()方法才将其后输入的空格键、Tab键或Enter键等视为分隔符或结束符
				   next()方法不能得到带空格的字符串
			nextLine():nextLine()方法可以获取到有效字符前的空白字符，
				       并且nextLine()方法的结束符只是Enter键，
				       即nextLine()方法返回的是Enter键之前的所有字符，
				       它是可以得到带空格的字符串的。
		eg：
			Scanner sc = new Scanner(System.in);
			String str = sc.next();
			System.out.printnln(str);
		若输入内容为"  你好啊！   ",那么上述str的值为：你好啊！
			String str = sc.nextLine();
			System.out.printnln(str);
		若输入内容为"  你好啊！   ",那么上述str的值为： 你好啊！
	1.3 Scanner练习   
		练习1：编写一个收银柜台收款程序，根据商品单价，购买数量以及收款金额计算并输出应收金额和找零
		练习2：针对上述练习题，如果当总价大于等于500时，享受8折优惠，怎么做呢？
2.分支结构
	2.1 什么是分支结构
		程序可以在运行过程中，根据不同的条件运行不同的语句
	2.2 if语句
		1)语法以及执行流程：
			语句0;
			if(逻辑表达式){
				语句1;
				语句2;
			}
			语句3;
			a)执行语句0
			b)判断逻辑表达式的值：
				若值为true，则执行语句1,语句2
				若为false，则不执行语句1,语句2
			c)执行语句3
			总结：首先判断逻辑表达式是否成立，成立则执行if语句，不成立则跳过if语句执行if下面的语句
		2)处理练习2的问题
	2.3 if-else语句
		练习3：针对练习2的问题，考虑程序异常情况，如收款金额小于应收金额怎么办？
			--若收款金额大于应收金额，则计算找零后输出
			--若收款金额小于应收金额，则输出错误提示
		1)语法以及执行流程
			语句0;
			if(逻辑表达式){
				语句1;
			}else {
				语句2;
			}
			语句3;
			a)执行语句0
			b)判断逻辑表达式的值：
				若值为true，则执行语句1
				若为false，则执行语句2
			c)执行语句3
			总结：首先判断逻辑表达式是否成立，成立则先执行if语句，再执行if-else下面的语句，
			           不成立则执行else语句，再执行if-else下面的语句
		2)处理练习3的问题	
	2.4 if-else if-else语句
		1)语法以及执行流程：
			语句0;
			if(逻辑表达式1){
				语句1;
			}else if (逻辑表达式2){
				语句2;
			}else if (逻辑表达式3){
				语句3;
			}else{
				语句4;
			}
			语句5;
			a)执行语句0
			b)判断逻辑表达式1的值：
				若值为true，则执行语句1，然后执行语句5
				若为false，则判断逻辑表达式2的值
				若逻辑2的值为true，则执行语句2，然后执行语句5
				若为false，则判断逻辑表达式3的值
				为逻辑3为true，则执行语句3，然后执行语句5
				若为false，则执行语句4，然后执行语句5
			注：其中if和else只能有一个，else if可以有多个
		2)练习：根据学员的成绩输出等级：
			A(成绩大于等于90分)
			B(成绩小于90并且大于等于80分)
			C(成绩小于80并且大于等于60分)
			D(成绩小于60分)    
	2.5 switch case语句
		1)switch case语句是一种特殊的分支结构，可以根据一个整数表达式的不同取值，从不同的程序
		入口开始执行
		2)语法以及执行流程：
			switch(整型表达式){
			case 整型常量值1:
				语句1;
				语句2;
			case 整型常量值2:	
				语句3;
				语句4;
			...
			default:
				语句n;
			}
			a)先根据整型表达式的值判断与哪个case的值相匹配
			b)若有匹配，则执行匹配的case中的代码，若所有的case都不匹配，则执行default中的语句
			c)执行完当前case，继续执行下面的case，一直到switch case结束
		3)练习：根据学员的成绩输出等级：(使用switch case实现)
			A(成绩大于等于90分)
			B(成绩小于90并且大于等于80分)
			C(成绩小于80并且大于等于60分)
			D(成绩小于60分) 
		4)在switch case中使用break语句
			a)语法：
				switch(整型表达式){
				case 整型常量值1:
					语句1;
					语句2;
					break;
				case 整型常量值2:	
					语句3;
					语句4;
					break;
				...
				default:
					语句n;
					break;
				}
			b)执行流程：
				i)先根据整型表达式的值判断与哪个case的值相匹配
				ii)若有匹配，则执行匹配的case中的代码，若所有的case都不匹配，则执行default中的语句
				iii)执行完当前case，遇到break，则跳出当前switch case，不再执行下面的case
			c)重新编写根据学员的成绩输出等级案例
			d)练习：
				根据用户在控制台的不同输入，执行不同的功能：
					-输入1，用户选择的功能为"显示全部登录记录"
					-输入2，用户选择的功能为"查询登录记录"
					-输入0，用户选择的功能为"退出"

			