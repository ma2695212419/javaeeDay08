1.java变量
	1.1什么是变量
		变量就是指在内存中开辟的存储空间，用于存放运算过程中需要用到的数据
		eg:
			int a = 5;
			int b = 6;
			int c = a + b;
			变量a、b和c分别指代内存中三块用于存储整数的存储空间，分别用来存储两个整数以及这两个整数
		之和。
	1.2变量的声明
		1)当需要使用一个变量时，必须对该变量进行声明
		2)变量的声明包含两点：变量名和变量类型
		3)java语言语法规定，变量使用之前必须声明，否则会出现编译错误
		4)如果多个变量的类型一样，可以在一条语句中声明，中间用逗号分隔
		eg：
			int a = 1,b = 2;
			int c,d = 4;
	1.3变量的命名
		变量的命名必须符合java标识符的规则
			1)可以有字母，数字，_和$组成
			2)首字符不能是数字
			3)java大小写敏感，命名变量时需要注意
			4)不能使用java保留字（如int，if，for等）
			5)中文可以作为变量名，但是不提倡使用
			6)采用“驼峰命名法”命名变量，即除了第一个单词外，其他单词首字母大写，其余字母小写
	1.4变量的初始化
		java语言规定，变量在使用之前必须进行初始化，即必须给该变量赋予特定的值
		未经初始化的变量不能使用
		变量初始化的两种方式：
			1)声明变量同时进行初始化
				int a = 4;
			2)在第一次使用变量前初始化
				int a;
				a = 4;
				System.out.println(a);
	1.5变量的访问
		1)可以对变量中的值进行存取，操作
			变量是存放数据的空间，可以对其进行赋值，更改和操作，要把对变量的操作理解为是对其
			所存储的数据的操作
			eg：
				int a = 100;
				a += 200;
				这条语句的意思为：将a变量所存储的数据的值加上200再存入变量a
		2)变量的操作必须与类型相匹配
			变量在声明时指定了类型，java编译器会检测对该变量的操作是否与其类型匹配，如果对变量的
			赋值或者操作与其类型不匹配，会出现编译错误
			eg：
				double d = 300.0;
			    int a = d / 100;//编译错误，d/100是double型，不能赋值给int型
2.java基本数据类型
	java的基本数据类型一共有8种，分别用于存储整数，浮点数，字符数据和布尔类型的数据
	整数类型：byte(1个字节，8位二进制位) 
		   short(2个字节，16位二进制位) 
		   int(4个字节，32位二进制位) 
		   long(8个字节，64位二进制位)
	浮点类型：float(4个字节，32位二进制位) 
	 	   double(8个字节，64位二进制位)
	字符类型：char(2个字节，16位二进制位)
	布尔类型：boolean(1个字节，8位二进制位)
	2.1 int类型：
		1)int是最常用的整数类型，一个int类型的变量占用4个字节（32位二进制位）
		最大表示的范围是-2^31 ~  2^31-1
		2)整型直接量(直接写出来的数)默认是int类型
			--整数的直接量的类型默认是int类型，如果直接写出来的数超过了int的范围，将
			     出现编译错误
			--除了通常的十进制书写形式，整型直接量也可以写16进制形式（以0x开头或0X开头）
			     或8进制的形式（以0开头）
			eg：
				int a = 10000;
				int b = 0x186a;
				int c = 034523;
		3)运算具有封闭性
			两个整数相除，会舍弃小数部分，结果也是整数
			eg：
				int a = 5 / 3;
				System.out.println(a);//1
		4)运算时要防止溢出
			整数运算的溢出：两个整数进行运算时，其结果可能超过整数的范围而发生溢出。
			eg：
				int a  = 2147483647;
				a = a + 1;
				System.out.println(a);//-2147483648
				int b = -2147483648;
				b = b - 1;
				System.out.println(b);//2147483647
	2.2 long类型：
		1)在表示整数时，如果int类型的范围不够，可以使用long类型，一个long类型占用8个字节（32位
		二进制位），最大表示的范围为：-2^63 ~ 2^63-1
		2)如果要表示long类型的直接量，需要以L或l结尾
		3)long类型存储当前系统时间
			JDK提供了System.currentTimeMillis()方法，返回1970年1月1日零点到此时此刻
			所经历的毫秒值，其数据类型为long类型，该方法用于计时操作
	2.3 double类型：
		1)使用double进行浮点数的运算
		2)浮点数直接量默认是double类型的，如果需要表示float类型的变量，需要加上f或F后缀
		3)double运算时会出现舍入误差
	2.4 char类型：
		1)char类型事实上是一个16位无符号整数，这个值是对应字符的编码
		2)java字符类型采用Unicode字符集编码，Unicode是定长字符集，所有的字符都是16位
		3)对char类型变量的赋值
			--直接量赋值：char ch = 'A';
				(变量中实际存的是该字符对应的Unicode值)
			--整型直接量：char ch = 65;
				(这个范围在0 ~ 65535之间，变量中实际存的就是这个整数本身，但表示的是该整数
				所对应的Unicode字符)
			--Unicode形式：char ch = '\u0041';
				(Unicode字符的16进制形式)
		4)转义字符
			对于不方便输出的字符采用转义字符表示：
				'\n'  --   回车  (Unicode编码为10)
				'\r'  --   换行  (Unicode编码为13)
				'\\'  --   反斜杠(\，Unicode编码为13)
				'\''  --   单引号('，Unicode编码为39)
	2.5 boolean类型：
		1)boolean类型适用于逻辑运算，表示某个关系是否成立
		2)boolean只允许取值为true或false，true表示条件成立，而false表示条件不成立
		3)boolean类型变量经常用于存储关系运算的结果
		eg：
			int age = 18;
			boolean isChild = age < 16;
			System.out.println(isChild);//false
			boolean running = true;
			boolean closed = false;
3.类型间的转换
	3.1 自动类型转换(小类型-->大类型的转换)
		byte-->short-->int-->long-->float-->double
		       char -->
		eg：
			int a = 100;
			int b = 200;
			long c = a + b;(发生了自动类型转换 int --> long)
	3.2 强制类型转换(大类型-->小类型的转换)
		语法： (强转的类型)要强转的变量
		但是这样可能会出现精度损失或溢出
		eg：
			long l1 = 1024l;
			int a = (int)l1;//因为1024在int范围内，所以此处没有溢出
			
			long l2 = 1024L * 1024 * 1024 * 4;(4G)
			int b = (int)l2;//此处有溢出，因为l2的值超过了int的范围
			System.out.println(b);//0
			
			double pi = 3.1415926535897932384;
			float f = (float)pi;//此处有精度损失
			System.out.println(f);//3.1415927
	3.3 数据运算时的自动转换
		多种类型的变量进行运算时，结果会自动的向较大的类型进行转换
		eg：
			double d1 = 80 / 100;
			System.out.println(d1);//0.0
			double d2 = 80.0 / 100;
			System.out.println(d2);//0.8
	3.4 byte，char，short转换为int
		1)int类型的直接量在不超过byte，short，char的范围时，可以直接给这三种类型的变量赋值
		eg：
			byte b = 127;
			System.out.println(b);//127	
		2)byte,short,char三中类型参与运算时，先一律转换为int再进行计算
			byte b1 = 1;
			byte b2 = 2;
			//此处出现编译错误，因为byte类型的b1和b2在运算时，已经被转换为int类型
			//int加上int还是int，所以如果想将结果转换为byte，需要进行强转
			byte b3 = b1 + b2;
			System.out.println(b3);
4.运算符和表达式
	4.1 算数运算：
		+、-、*、/、%、++、--
		+：
			1)做数值加法操作
			2)做字符串拼接操作
			eg：
				int a = 5;
				int b = 6;
				int c = a + b;//此处做数值相加操作
				System.out.println(c);//11
				int age = 30;
				String msg = "你的年龄" + age;//此处做字符串拼接操作
				System.out.println(msg);//你的年龄30
				msg = "" + 100 + 200;//字符串拼接操作
				System.out.println(msg);//100200
				msg = 1 + 2 + "" + 3;//先做数值后做字符串(符合从左到右运算规则)
				System.out.println(msg);//33
		/：整除操作
			eg：
				int a = 5;
				int b = 2;
				System.out.println(a/b);//2
		前++：在使用这个变量之前先将变量的值+1或-1操作
		后++：在使用完这个变量以后在将变量的值+1或-1操作
		eg：
			int a = 10,b = 20;
			int c1 = a++;
			int c2 = ++b;
			System.out.println("a="+a+",b="+b+",c1="+c1+",c2="+c2);
			//a=11,b=21,c1=10,c2=21
	4.2 关系运算：
		<、>、<=、>=、==、!=
		关系运算的结果为boolean类型，如果关系成立为true，否则为false
		eg：
			int max = 10;
			int num = 9;
			boolean b1 = max > 15;//false
			boolean b2 = num % 2 == 1;//true
	4.3 逻辑运算：
		&&(与) ||(或) !(非)
		逻辑运算建立在关系运算上，参与逻辑运算的变量或表达式都是boolean类型运算结果也为boolean类型
		逻辑运算规则如下：
			变量b1                 变量b2      b1&&b2      b1||b2    !b1
			true		true       true        true     false
			true        false      false       true     false
			false       true       false       true     true
			false       false      false       false    true
		"短路逻辑"
			--"短路&&"：当第一个变量或表达式的值为false时，将不会判断后面的表达式的值
			--"短路||"：当第一个变量或表达式的值为true时，将不会判断后面的表达式的值
			eg：
				int i = 100,j = 200;
				boolean b1 = (i>j) && (i++>100);
				System.out.println(i + "," + b1);//100,false
				boolean b2 = i > 0  || j++ > 200;
				System.out.println(j + "," + b2);//200,true
	4.4 赋值运算：
		=、+=、-=、*=、/=、%=
		+=：扩展赋值表达式
			eg：
				int a = 5;
				a += 10;//相当于a = a + 10
				System.out.println(a);//15
	4.5 条件(三目)运算：
		语法：
			boolean表达式 ? 表达式1 : 表达式2;
		规则：
			--先计算boolean表达式的值
			--如果为true，则整个表达式的值为表达式1的值
			--如果为false，则整个表达式的值为表达式2的值
		eg：
			int a = 100,b = 200;
			int flag = a > b ? 1 : -1;
			System.out.println(flag);//-1
		
 