1.进程：
	进程：操作系统上的应用程序（软件）
          运行的应用程序都有一个属于自己的内存区域
2.线程
	线程：一个进程中运行一个任务（一个顺序执行流）
                     一个进程中至少有一个线程。
                     一个进程中的所有线程共享这个进程的内存区域
3.并发
	并发：对线程来说，一起发生（计算机中，实际上，在微观的角度上看，并不是一起发生，是断断续续的，走走
	停停的）
    cpu：在一个时间点--一个微小的时间片段上，只能做一件事(一个任务)。
          计算机中，宏观上是同时进行，实际上是断断续续的进行的现象称之为并发。
4.线程的创建方式
	4.1 继承Thread类  
	4.2 实现Runnable接口
	4.3 可以使用匿名内部类的方式
5.后台线程与前台线程
	isDaemon()：是不是后台线程，默认的线程是前台线程
	setDaemon(true)：设置为后台线程
	一个应用程序中所有的前台线程都结束了，后台线程自动结束。后台线程多用于处理短时间的数据传送
6.多线程安全问题：
	多个线程同时运行某一块代码，可能会出现不必要的数据安全隐患。
	多线程的运行分为两种：
	异步：多个线程各做各的  （上车：四轮子的后车斗）
	同步：按照顺序做，一个做完，下一个做。（上车：上客车）
	在做相同的事情时，也是各做各的，异步，没有顺序。同步，是有顺序的
	异步时会出现数据安全问题。解决安全问题，需要使用多线程同步。
	怎么同步呢？？？
	对共同做的事情加上同步锁
	加锁的范围尽可能的小
	可以在方法上直接加同步关键字synchronized
	也可以在代码片段上添加同步锁
	synchronized(Object){
	}
	因为Object身上有一个内置锁。
	多线程执行到需要同步的那个代码片段时，一定是同一把锁。
7.常用方法
	obj.notify()：线程通知
	obj.wait()：线程等待
	线程对象.join()：等待该线程结束，执行后续代码
	