1.File
	1.1 java.io.File用于表示文件(目录)，也就是说程序员可以通过File类在程序中操作硬盘上的文件或目录
	1.2 File类只表示文件的信息(名称，大小)，不能对文件的内容进行访问
	1.3  常用方法
		a)boolean isFile()：判断File对象表示的是否为一个文件，如果是，返回true
		b)long length()：返回当前File对象所表示的文件所占用的字节量
		c)boolean exists()：若该File对象所表示的文件或目录存在就返回true
		d)boolean createNewFile()：如果指定文件不存在并成功创建返回true，如存在返回false
		e)boolean delete()：删除成功返回true
		注：若该文件表示的是一个目录，则需要删除该目录下所有的文件才能将该目录删除
		f)boolean isDirectory()：判断File对象表示的是否为一个目录，如果是，返回true 
		g)boolean mkdir()：目录成功创建以后返回true
		h)boolean mkdirs()：当且仅当已创建目录以及所有必需的父目录时，返回true
		i)File[] listFiles()：获取指定目录下的所有子项，如果该路径不表示一个目录，则返回null
		  File[] listFiles(FileFilter filter)：用于返回满足该过滤要求的子项
		  其中：FileFilter是一个接口，内部抽象方法accept用于表示过滤的条件
		eg：过滤当前目录下所有以".jpg"结尾的文件
			File file = new File(".");
			File[] list = file.listFiles(new FileFilter(){
				public boolean accept(File pathname){
					return pathname.getName().endsWith(".jpg");
				}
			});
			for (File f : list){
				System.out.println(f);
			} 
2.RandomAccessFile
	2.1 RandomAccessFile是一个可以对文件进行随机访问(读和写)的类，它的读和写是基于指针的操作
	2.2 创建方式
		a)只读模式
			new RandomAccessFile(File file,"r");
			new RandomAccessFile(String pathname,"r");
		b)读写模式
			new RandomAccessFile(File file,"rw");
			new RandomAccessFile(String pathname,"rw");
	2.3 常用方法
		a)void write(int d)：根据指针所在位置，写入一个字节，将参数int的"低八位"写出
		b)int read()：根据指针位置读入一个字节填充到int的"低八位"上，高24位由0补齐，返回值范围为
		0~255，如果返回-1，表示读到了文件末尾
		c)void write(byte[] b)：根据指针位置写出字节数组中的所有字节(全部写出)
		  void write(byte[] b,int offset,int len)：根据指针位置写出b数组的部分字节，这个
		  部分是从offset位置开始的，连续len个字节(写出一部分)
		d)int read(byte[] b)：根据指针位置尝试最多读取给定数组总长度的字节量，并从给定字节数组的
		第一个位置开始，将读取到的字节顺序放置数组中，返回值为实际读取到的字节量
		e)void close()：用于关闭操作
		f)long getFilePointer()：获取当前指针位置
		g)void seek(long pos)：将指针移至到某个位置
		h)int skipBytes(int n)：尝试将指针跳过n个字节，返回实际跳过的字节数，若n为负数，不跳过
