1.内存管理机制
	1.1 堆内存(用于存放new关键字所创建的对象)
		a)JVM在其内存空间开辟了一个称为"堆"的存储空间，这部分空间用于存储使用new
		     关键字所创建的对象
		b)成员变量的生命周期
		     从对象在堆中创建开始到对象从堆中被收回结束
		c)垃圾回收机制
			i)垃圾回收器(GC)是JVM自带的一个线程(自动运行着的程序)，用于回收没有任何引用
			     指向的对象
			ii)java程序员不用担心内存管理问题，因为垃圾回收机制会自动进行回收
			        管理
		d)java内存泄露
			i)内存泄露是指不再使用的内存没有被及时的回收，严重的内存泄露会因过多的
			      内存占用而导致程序的崩溃
			ii)GC线程判断对象是否可以回收的依据是该对象是否有引用指向，若有指向，
			      则该对象不能被回收，若没有则可以被回收。 
	1.2 栈内存(用于存放方法中的局部变量)
		a)JVM在其内存空间开辟了一个称为"栈"的存储空间，这部分主要用于存放程序运行
		     时在方法中声明的所有局部变量
		b)局部变量的声明周期
			i)一个运行的java程序从开始到结束会有多次方法的调用，JVM会为每一个
			  方法的调用在栈中分配一个对应的空间，这个空间被称为"栈帧"
			ii)一个栈帧对应一个正在调用中的方法，栈帧中存储了该方法的参数，局部
			   变量等数据，当某一个方法调用完成后，其对应的栈帧将被清除，局部变量
			   消失
	1.3 方法区
		a)方法区中用于存放类的信息
			i)方法区中用于存放类的信息，程序在运行时，首先会通过类装载器载入类文件的
			     字节码信息，经过解析后将其装入到方法区。类的各种信息(包括方法)都在方法
			     区中存储。
			  eg：
				  Cell c = new Cell();
				  Cell类会首先被装载到JVM的方法区中，其中包括类的基本信息和方法
			           定义等
			ii)方法只有一份
				类在实例化对象时，多个对象会拥有各自在堆中的空间，但所有实例对象
				是共用在方法区中的一份方法定义的。			           
2.成员变量和局部变量
	2.1 成员变量
		在类中定义，用来描述对象将要有什么
	2.2 局部变量
		在类的方法中定义，在方法中临时保存数据
	2.3 成员变量和局部变量的区别
		a)作用域不同
			-局部变量的作用域仅限于定义它的方法
			-成员变量的作用域在整个类内部都是可见的
		b)初始值不同
			-成员变量有默认的初始值
			-局部变量没有默认的初始值，必须自行设定初始值
		c)在同一个方法中，不允许有同名的局部变量
		     在不同的方法中，可以有同名的局部变量
		d)存储位置不同
			-成员变量是在对象创建以后存在于堆中，对象回收时，成员变量消失
			-局部变量是在方法被调用时存在于栈中，方法调用结束，从栈中清除
3.继承(面向对象三个特征之一)
	3.1 什么是继承
		继承财产，继承皇位，继承房屋。。。总之就是子承父业
	3.2 java中如何实现继承 
		a)在java中，我们通过使用关键字extends来实现类与类之间的继承关系
		b)子类可以继承父类的成员变量以及成员方法，同时也可以定义自己的成员变量和成员方法
	3.3 java语言不支持多继承，一个类只能继承一个父类，但一个父类可以有多个子类
		eg：
			public class Tetromino{
				Cell[] cells;
				public Tetromino(){
					cells = new Cell[4];
				}
				public void moveLeft(){}
				public void moveRight(){}
			}
			public class T extends Tetromino{
				public T(int row,int col){
					cells[0] = new Cell(row,col);
					cells[1] = new Cell(row,col+1);
					cells[2] = new Cell(row,col+2);
					cells[3] = new Cell(row+1,col+1);
				}
			}
		注：我们在T类中并没有声明成员变量Cell[]，但是因为T类继承自Tetromino，便可以继承自父类中
		的属性Cell[]，所以即便我们在T类中没有写Cell[]，但实际上T类也是有Cell[]属性的。同时T类中
		也包含从父类继承过来的moveLeft和moveRight方法
	3.4 继承中的构造方法
		a)子类的构造器中必须通过super关键字调用父类的构造器，这样可以妥善的初始化继承自父类的成员变量
		b)如果子类的构造方法中没有调用父类的构造方法，java编译器会自动的加入对父类无参构造方法的调用，
		     如果父类没有无参构造方法，会有编译错误
		eg：
			public class One{
				public One(){
					//super();此处省略了super()，调用父类Object类无参构造
					//而One这个类没有继承自任何类，其实是隐式继承自Object，Object中
					//的无参构造什么都没有做。
					System.out.println("one");
				}
			}
			public class Two extends One{
				public Two(){
					//super();此处省略了super()，调用父类One类无参构造
					System.out.println("two");
				}
			}
			public class Three extends Two{
				public Three(){
					//super();此处省略了super()，调用父类Two类无参构造
					System.out.println("three");
				}
				public static void main(String[] args){
					Three t = new Three();
				}
			}
		输出结果：one  two  three
			class Foo{
				int value;
				Foo(int value){
					this.value = value;
				}
				public void test1(){}
			}
			class Goo extends Foo{
				int num;
				Goo(int num){//注：此处出现编译错误
					//super();因为在此处省略了super()，调用父类无参构造，而父类没有无参构造
					//所以此处会报错，若不想出现编译错误，需要我们显示调用父类带参构造
					super(num);
					this.num = num;
				}
				public void test2(){}
			}
4.向上造型
	4.1 什么是向上造型
		父类型引用指向子类型的对象就叫向上造型
		eg：
			Foo obj = new Goo(3);
	4.2 父类的引用指向子类的对象，但通过父类的引用只能访问父类所定义的成员，不能访问子类扩展的部分
		eg：
			obj.test1();
			obj.value = 4;
			obj.test2();//编译错误，obj不能调用子类扩展的方法
			obj.num = 3;//编译错误