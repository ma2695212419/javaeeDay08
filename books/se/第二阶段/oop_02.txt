1.方法的重载
	1.1 方法的签名
		a)方法的签名包含两部分：方法名和参数列表
		b)一个类中，不可以有两个方法签名完全相同(方法名和参数列表都相同)
		c)如果一个类中的几个方法是方法名相同，但是参数列表不同是可以的(这样的方法
		我们称之为方法的重载)
	1.2 方法的重载
		在java语言中，允许多个方法的方法名相同，但参数列表不同，这样的方法称之为
		重载方法。
	1.3 方法重载的意义(编译时根据签名绑定调用方法)
		编译器在编译时会根据方法的签名来绑定调用不同的方法，我们可以把重载的方法看成
		是完全不同的方法，只不过恰恰方法名相同而已。
2.构造方法
	2.1 语法结构
		a)方法名与类名相同
		b)没有返回值，也不能写void
		eg：
			[修饰符] 类名(){
			}
	2.2 构造方法的作用
		构造方法常用于实现对象成员变量的初始化
	2.3 构造方法的调用时机
		我们在使用new关键字创建对象时，系统会自动调用类中的构造方法
	2.4 默认构造方法
		a)任何一个类都必须含有构造方法
		b)如果源程序中没有定义构造方法，编译器会在编译时将为其添加一个无参的空构造方
		      法(我们称之为"默认的构造方法")
		c)当我们在源程序中定义了构造方法后，java编译器将不会再添加默认的构造方法
3.this关键字
	3.1 this使用在普通方法中
		this关键字用在方法体中，用于指向调用该方法的当前对象，简单说，哪个对象调用
		方法，this代表的就是哪个对象。严格来讲在方法中需要通过this关键字指明当前对象。
		eg：
			public void drop(){
				this.row++;//一般在没有歧义的情况下可以省略this
			}
	3.2 this使用在构造方法中
		在构造方法中，用来初始化成员变量的参数一般和成员变量取相同的名字，这样会有利
		于代码的可读性，但此处就必须通过this关键字来区分成员变量和参数
		eg：
			public Cell(int row,int col){
				this.row = row;
				this.col = col;
			}
4.构造方法的重载
	4.1 为了使用方便，可以对一个类定义多个构造方法，这些构造方法具有相同的名称(类名)，
	         方法的参数不同，这些方法称之为构造方法的重载
	4.2 在创建对象时，java编译器会根据不同的参数调用不同的构造方法。
		eg：
			Cell c1 = new Cell(4,5);//调用两个参数的构造方法
			Cell c2 = new Cell(3);//调用一个参数的构造方法
			Cell c3 = new Cell();//调用无参的构造方法
	4.3 构造方法中使用this
		一个构造方法可以通过this关键字调用另外一个重载的构造方法
		eg：
			public Cell(int row,int col){
				this.row = row;
				this.col = col;
			}
			public Cell(int n){
				this(n,n);//调用两个参数的构造方法
			}
			public Cell(){
				this(0,0);
			}
		注：此处可以使用this关键字实现多个构造方法之间的相互调用，但是切记不能实现
		        循环调用，另外this调用其他构造器必须放在第一行才可以。
		   		eg：
				public Cell(int row,int col){
					this(row);//调用一个参数的构造器
					this.row = row;
					this.col = col;
				}
				public Cell(int n){
					this();//调用无参构造方法
				}
				public Cell(){
					//错误，此处不能调用两个参数的构造方法，因为形成了循环调用
					//this(0,0);
				}
5.引用类型的数组
	5.1 在java中，数组属于引用类型对象
	5.2 数组对象在堆中存储，数组变量属于引用类型，存储数组对象的地址信息，指向数组
	         对象
		eg：
			int[] arr = new int[3];
			内存结构如下：
				arr位于栈中，内部存放的是地址值(如0x50)
				int[]存在于堆中，arr通过地址值指向这个对象，arr[0]的值为0
	5.3 引用类型数组的声明
		数组的元素可以是任何类型，当然也包括引用类型
		eg：
			Cell[] cs = new Cell[4];	
		注：new Cell[4]实际是分配了4个空间用于存放4个Cell类型的引用，
		并不是分配了4个Cell类型的对象，所以此处堆中虽然有4个空间，但是此时4个空间
		的值都为null，因为Cell是引用类型，引用类型的默认值为null
	5.4 引用类型数组的初始化
		a)引用类型数组的默认值都是null
		b)如果希望每一个元素都指向一个具体的对象，需要针对每一个数组元素进行new运算
		eg：
			第一种初始化方法：
				Cell[] cs = new Cell[4];
				cs[0] = new Cell(1,3);
				...
			第二种初始化方法
				Cell[] cs = new Cell[]{
					new Cell(1,2),
					new Cell(3,4),
					new Cell(5,6),
					new Cell(3,2)
				};
		注：初始化以后，cs的每一个元素的值就不再是null，而是创建的每一个Cell对象
		的地址值。
	5.5 二维数组
		a)二维数组的定义
			int[][] arr = new int[3][];	
			arr[0] = new int[2];
			arr[1] = new int[3];
			arr[2] = new int[2];
			arr指向一个数组，该数组中有三个元素，每个元素都是int数组类型，长度分别为
			2,3,2
		b)java中的二维数组实际上是一维数组中嵌套一维数组，而java中实际上是没有
		     二维数组的
		c)二维数组的遍历(双重for循环)
			int[][] arr = new int[3][];
			arr[0] = new int[]{2,4};
			arr[1] = new int[]{1,3,6};
			arr[2] = new int[1];
			for (int i=0;i<arr.length;i++){
				for (int j=0;j<arr[i].length;j++){
					System.out.print(arr[i][j] + " ");
				}
				System.out.println();
			}
			
